generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Project {
  id    String @id @default(cuid())
  name  String
  pages Page[]
}

model Page {
  id        String     @id @default(cuid())

  name      String
  createdAt DateTime @default(now())
  // TODO
  // updatedAt DateTime @updatedAt

  textAreas TextArea[]

  project   Project    @relation(fields: [projectId], references: [id])
  projectId String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
}

model TextArea {
  id         String   @id @default(cuid())

  text       String?
  x          Int
  y          Int
  width      Int
  height     Int
  color      String?
  categories String[]

  page       Page     @relation(fields: [pageId], references: [id])
  pageId     String
}

// === auth ===

enum UserRole {
  ADMIN
  NOT_ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  role          UserRole         @default(NOT_ADMIN)
  pages         Page[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}